--lua
os.loadAPI('rom/luo/api') ; for k , v in pairs(api) do loadstring(string.format("%s = api.%s" , k , k))() end ;

slots = {
	[1] = {'fuel'} ;
	[2] = {'stuff-1' , 6} ;
	[3] = {'stuff-2' , 1} ;
} ;
slot.checkList(slots) ;

p = {force = false , destroy = false , echo = true} ;

print('testing move ...') ;
api.move.forward(p) ;
api.move.back(p) ;
api.move.left(p) ;
api.move.right(p) ;
api.move.up(p) ;
api.move.down(p) ;
api.status.turnTo('f') ;
print('next test : place') ;
sleep(5) ;

print('testing place ...') ;
api.place.forward(2 , p) ;
api.place.back(2 , p) ;
api.place.left(2 , p) ;
api.place.right(2 , p) ;
api.move.up(p) ;
api.place.up(2 , p) ;
api.place.down(2 , p) ;
api.status.turnTo('f') ;
print('next test : dig') ;
sleep(5) ;

print('testing dig ...') ;
api.dig.up(p) ;
api.dig.down(p) ;
api.move.down(p) ;
api.dig.forward(p) ;
api.dig.back(p) ;
api.dig.left(p) ;
api.dig.right(p) ;
api.status.turnTo('f') ;
print('next test : detect') ;
sleep(5) ;

print('testing detect ...') ;
api.place.left(2 , p) ;
api.detect.forward(p) ;
api.detect.back(p) ;
api.detect.left(p) ;
api.detect.right(p) ;
api.detect.up(p) ;
api.detect.down(p) ;
api.status.turnTo('f') ;
print('next test : compare') ;
sleep(5) ;

print('testing compare ...') ;
api.place.right(3 , p) ;
api.compare.forward(3 , p) ;
api.compare.back(3 , p) ;
api.compare.left(3 , p) ;
api.compare.right(3 , p) ;
api.compare.up(3 , p) ;
api.compare.down(3 , p) ;
api.status.turnTo('f') ;
print('next test : drop') ;
sleep(5) ;

print('testing drop ...') ;
api.drop.forward(2 , 1 , p) ;
api.drop.back(2 , 1 , p) ;
api.drop.left(2 , 1 , p) ;
api.drop.right(2 , 1 , p) ;
api.move.up(p) ;
api.drop.up(2 , 1 , p) ;
api.drop.down(2 , 1 , p) ;
api.status.turnTo('f') ;
print('next test : suck') ;
sleep(5) ;

print('testing suck ...') ;
api.suck.up(p) ;
api.suck.down(p) ;
api.move.down(p) ;
api.suck.forward(p) ;
api.suck.back(p) ;
api.suck.left(p) ;
api.suck.right(p) ;
api.status.turnTo('f') ;
print('next test : attack') ;
sleep(5) ;

print('testing attack ...') ;
api.attack.forward(p) ;
api.attack.back(p) ;
api.attack.left(p) ;
api.attack.right(p) ;
api.attack.up(p) ;
api.attack.down(p) ;
api.status.turnTo('f') ;

print('api test finished.') ;

api.dig.left(p) ;
api.dig.right(p) ;

api.slot.packUpAll() ;

